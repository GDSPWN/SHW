// this may be used as an own package in the future
extract obj_props

type @stamp
impl @stamp {
    new: (objects:[@object]|@object=[]){
        return @stamp::{
            objects: switch objects {
                [@object]: objects
                @object: [objects]
            },
            x: 0,
            y: 0,
            scaling: 1,
            z_order: 10,
            z_layer: -1,
        }
    },
    add: (self, object:@object){
    	self.objects.push(object);
    },
    print: (self){
        for object in self.objects {
            offset = 15 * self.scaling
            let clone = object
            clone.set(OBJ_ID, object[OBJ_ID] if object has OBJ_ID else 1)
            clone.set(X, ((object[X] * self.scaling) + self.x if object has X else self.x) + offset)
            clone.set(Y, ((object[Y] * self.scaling) + self.y if object has Y else self.y) + offset)
            clone.set(SCALING, object[SCALING] * self.scaling if object has SCALING else self.scaling)
            clone.set(Z_ORDER, object[Z_ORDER] + self.z_order if object has Z_ORDER else self.z_order)
            clone.set(Z_LAYER, -1 if self.z_layer == 0 else self.z_layer)
            $.add(clone)
        }
    },
}
